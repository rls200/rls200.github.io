{"version":3,"sources":["pages/users/styles.module.css","redux/users/actions.js","redux/users/constants.js","pages/users/tableOptions.js","pages/users/AddNewUser.js","pages/users/UsersTable.js","pages/users/SelectRowData.js","pages/users/Users.js","redux/constants.js","routes/index.js","routes/ExtBrowserRouter.js","routes/Routes.js","App.js","serviceWorker.js","redux/users/reducers.js","redux/reducers.js","helpers/api.js","helpers/utils.js","redux/users/saga.js","redux/sagas.js","redux/store.js","index.js"],"names":["module","exports","getUsersList","dataSize","type","payload","setUsersError","data","setAddUserStatus","setNewUserData","setSelectData","columns","dataField","text","sort","defaultSorted","order","AddNewUser","props","toggleNested","bind","handleValidSubmit","this","event","values","Fragment","Button","color","onClick","Modal","isOpen","addUserStatus","toggle","ModalHeader","ModalBody","className","onValidSubmit","Label","for","name","id","placeholder","required","Row","Col","sm","md","FormGroup","Component","connect","state","Users","dispatch","bindActionCreators","UsersTable","userList","usersList","options","custom","sizePerPage","totalSize","length","SearchBar","Search","selectRow","onSelect","row","mode","clickToSelect","hideSelectColumn","bgColor","selectColumnStyle","backgroundColor","keyField","tableOptions","style","marginBottom","bootstrap4","search","pagination","paginationFactory","paginationProps","paginationTableProps","searchProps","classes","styles","usersTable","baseProps","SelectRowData","selectData","Jumbotron","fluid","firstName","lastName","description","address","streetAddress","city","zip","handleLoadUsersList","Container","align","active","getUserListStatus","Spinner","width","height","allRoutes","path","exact","component","to","route","Route","historyRef","createBrowserHistory","ExtBrowserRouter","children","history","Routes","map","index","key","App","Boolean","window","location","hostname","match","initialState","error","UsersReducer","action","combineReducers","API_URL","fetchJSON","url","fetch","then","response","json","catch","removeDuplicates","array","lookup","Set","filter","obj","has","add","fetchUsersList","watchFetchUserList","usersSaga","put","call","requestType","body","apiOptions","method","headers","userListNoDuplicate","status","message","takeEvery","all","fork","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","ReactDOM","render","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","run","sagas","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0acbe69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersTable\":\"styles_usersTable__1KRVr\"};","/*USERS*/\nimport {\n    GET_USERS_LIST,\n    SET_USERS_LIST,\n    SET_USERS_ERROR,\n    ADD_USER_STATUS,\n    NEW_USER_DATA,\n    SET_USER_LIST_STATUS,\n    SET_SELECT_DATA\n} from './constants';\n\nexport const getUsersList = dataSize => ({\n    type: GET_USERS_LIST,\n    payload: dataSize\n});\nexport const setUsersList = data => ({\n    type: SET_USERS_LIST,\n    data\n});\nexport const setUsersError = data => ({\n    type: SET_USERS_ERROR,\n    data\n});\nexport const setAddUserStatus = () => ({\n    type: ADD_USER_STATUS\n});\nexport const setNewUserData = data => ({\n    type: NEW_USER_DATA,\n    data\n});\nexport const setUserListStatus = () => ({\n    type: SET_USER_LIST_STATUS\n});\nexport const setSelectData = data => ({\n    type: SET_SELECT_DATA,\n    data\n});\n\n\n","/*USERS*/\nexport const GET_USERS_LIST = 'GET_USERS_LIST';\nexport const SET_USERS_LIST = 'SET_USERS_LIST';\nexport const SET_USERS_ERROR = 'SET_USERS_ERROR';\nexport const ADD_USER_STATUS = 'ADD_USER_STATUS';\nexport const NEW_USER_DATA = 'NEW_USER_DATA';\nexport const SET_USER_LIST_STATUS = 'SET_USER_LIST_STATUS';\nexport const SET_SELECT_DATA = 'SET_SELECT_DATA';","import React from 'react';\n\nconst columns = [\n    {\n        dataField: 'id',\n        text: 'Id',\n        sort: true\n    },\n    {\n        dataField: 'firstName',\n        text: 'FirstName',\n        sort: true\n    },\n    {\n        dataField: 'lastName',\n        text: 'LastName',\n        sort: true\n    },\n    {\n        dataField: 'email',\n        text: 'Email',\n        sort: true\n    },\n    {\n        dataField: 'phone',\n        text: 'Phone',\n        sort: true\n    },\n    {\n        dataField: 'address.streetAddress',\n        text: 'StreetAddress',\n        sort: true\n    },\n    {\n        dataField: 'address.city',\n        text: 'City',\n        sort: true\n    },\n    {\n        dataField: 'address.state',\n        text: 'State',\n        sort: true\n    },\n    {\n        dataField: 'address.zip',\n        text: 'Zip',\n        sort: true\n    },\n    {\n        dataField: 'description',\n        text: 'Description',\n        sort: true,\n    }\n];\n\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'desc'\n}];\n\nexport const customTotal = (from, to, size) => (\n    <span className=\"react-bootstrap-table-pagination-total\">\n    Showing { from } to { to } of { size } Results\n  </span>\n);\n\nconst options = {\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nexport {columns, defaultSorted, options};","import React, {Component} from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, Label, FormGroup, Row, Col} from 'reactstrap';\nimport {AvFeedback, AvForm, AvGroup, AvInput} from \"availity-reactstrap-validation\";\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {setAddUserStatus, setNewUserData} from '../../redux/users/actions';\n\nclass AddNewUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNested = this.toggleNested.bind(this);\n        this.handleValidSubmit = this.handleValidSubmit.bind(this);\n    }\n\n    toggleNested() {\n        this.props.setAddUserStatus();\n    };\n    handleValidSubmit(event, values) {\n        this.props.setNewUserData(values);\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button\n                    color=\"primary\"\n                    onClick={this.toggleNested}\n                >\n                    Добавить\n                </Button>\n                <Modal\n                    isOpen={this.props.addUserStatus}\n                    toggle={this.toggleNested}\n                >\n                    <ModalHeader toggle={this.toggleNested}>Добавить пользователя</ModalHeader>\n                    <ModalBody className=\"px-5 pb-4\">\n                        <AvForm\n                            onValidSubmit={this.handleValidSubmit}\n                            className=\"authentication-form\"\n                        >\n                            <AvGroup>\n                                <Label for=\"id\">id</Label>\n                                <AvInput type=\"text\" name=\"id\" id=\"id\" placeholder=\"001\" required />\n                                <AvFeedback>Поле обязательно для заполнения!</AvFeedback>\n                            </AvGroup>\n                            <AvGroup>\n                                <Label for=\"firstName\">firstName</Label>\n                                <AvInput type=\"text\" name=\"firstName\" id=\"firstName\" placeholder=\"Ivan\" required />\n                                <AvFeedback>Поле обязательно для заполнения!</AvFeedback>\n                            </AvGroup>\n                            <AvGroup>\n                                <Label for=\"lastName\">lastName</Label>\n                                <AvInput type=\"text\" name=\"lastName\" id=\"lastName\" placeholder=\"Ivanov\" required />\n                                <AvFeedback>Поле обязательно для заполнения!</AvFeedback>\n                            </AvGroup>\n                            <AvGroup>\n                                <Label for=\"email\">email</Label>\n                                <AvInput type=\"email\" name=\"email\" id=\"email\" placeholder=\"email@email.com\" required />\n                                <AvFeedback>Поле обязательно для заполнения!</AvFeedback>\n                            </AvGroup>\n                            <AvGroup>\n                                <Label for=\"phone\">phone</Label>\n                                <AvInput type=\"phone\" name=\"phone\" id=\"phone\" placeholder=\"+79xxxxxxxx\" required />\n                                <AvFeedback>Поле обязательно для заполнения!</AvFeedback>\n                            </AvGroup>\n                            <Row className=\"justify-content-md-center\">\n                                <Col sm=\"12\" md=\"5\">\n                                    <FormGroup className=\"form-group mb-0 text-center\">\n                                        <Button color=\"primary\">Добавить в таблицу</Button>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </ModalBody>\n                </Modal>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        addUserStatus: state.Users.addUserStatus\n    }\n};\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    setAddUserStatus,\n    setNewUserData\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewUser);\n\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, {PaginationListStandalone, PaginationProvider} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\"\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n\nimport styles from './styles.module.css';\nimport * as tableOptions from './tableOptions';\nimport AddNewUser from './AddNewUser';\n\n\nconst UsersTable = props => {\n\n    const userList = props.usersList;\n    const options = {\n        custom: true,\n        sizePerPage: 50,\n        totalSize: userList.length\n    };\n    const { SearchBar } = Search;\n\n    const selectRow = {\n        onSelect: (row) => {\n            props.setSelectData(row);\n        },\n        mode: 'radio',\n        clickToSelect: true,\n        hideSelectColumn: true,\n        bgColor: '#00BFFF',\n        selectColumnStyle: { backgroundColor: 'blue' }\n    };\n\n    return (\n        <>\n            <ToolkitProvider\n                keyField=\"id\"\n                data={ userList }\n                columns={ tableOptions.columns }\n                style={{marginBottom: 0}}\n                bootstrap4\n                search\n            >\n                { props => (\n                    <div>\n                        <PaginationProvider pagination={ paginationFactory(options) }>\n                            {\n                                ({ paginationProps, paginationTableProps }) => (\n                                    <div>\n                                        <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                                            <AddNewUser/>\n                                            <div>\n                                                <SearchBar\n                                                    { ...props.searchProps }\n                                                    style={{marginBottom: 0}}\n                                                />\n                                                <PaginationListStandalone\n                                                    className=\"mx-2\"\n                                                    { ...paginationProps }\n                                                />\n                                            </div>\n                                        </div>\n                                        <BootstrapTable\n                                            keyField=\"id\"\n                                            data={ userList }\n                                            columns={ tableOptions.columns }\n                                            defaultSorted={ tableOptions.defaultSorted }\n                                            classes={styles.usersTable}\n                                            selectRow={selectRow}\n                                            {...paginationTableProps}\n                                            { ...props.baseProps }\n                                        />\n                                    </div>\n                                )\n                            }\n                        </PaginationProvider>\n                    </div>\n                )\n                }\n            </ToolkitProvider>\n        </>\n    )\n};\n\n\nexport default UsersTable;","import React from 'react';\nimport {Row, Col, Jumbotron, Button} from \"reactstrap\";\n\nconst SelectRowData = props => {\n    const selectData = props.selectData;\n    return (\n        <Row>\n            <Col className=\"pb-2\">\n                <Jumbotron fluid={false}>\n                    <p className=\"lead\">\n                        Выбран пользователь <b>{`${selectData.firstName} ${selectData.lastName}`}</b>\n                    </p>\n                    <hr className=\"my-2\" />\n                    <p>Описание:</p>\n                    <p>{selectData.description}</p>\n                    <p>Адрес проживания: <b>{selectData.address.streetAddress}</b></p>\n                    <p>Город: <b>{selectData.address.city}</b></p>\n                    <p>Провинция/штат: <b>{selectData.address.state}</b></p>\n                    <p>Индекс: <b>{selectData.address.zip}</b></p>\n                    <p className=\"lead\">\n                        <Button\n                            color=\"primary\"\n                            onClick={() => props.setSelectData('')}\n                        >\n                            Закрыть\n                        </Button>\n                    </p>\n                </Jumbotron>\n            </Col>\n        </Row>\n    )\n};\n\nexport default SelectRowData;","import React, {Component} from 'react';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {Container, Row, Col, Button, Spinner} from \"reactstrap\";\n\nimport {SMALL_DATA_URL, BIG_DATA_URL} from '../../redux/constants';\nimport {\n    getUsersList,\n    setSelectData\n} from \"../../redux/users/actions\";\nimport UsersTable from './UsersTable';\nimport SelectRowData from './SelectRowData';\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleLoadUsersList = this.handleLoadUsersList.bind(this);\n    }\n    handleLoadUsersList(dataSize) {\n        this.props.getUsersList(dataSize);\n    }\n    render() {\n        const selectData = this.props.selectData || '';\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <Col md={12}>\n                        <div align=\"center\" className=\"w-100 py-5\">\n                            <Button\n                                color=\"primary\"\n                                onClick={()=>this.handleLoadUsersList(SMALL_DATA_URL)}\n                                className=\"mx-2\"\n                                active\n                            >\n                                Маленький список\n                            </Button>\n                            <Button\n                                color=\"primary\"\n                                onClick={()=>this.handleLoadUsersList(BIG_DATA_URL)}\n                                className=\"mx-2\"\n                                active\n                            >\n                                Большой список\n                            </Button>\n                        </div>\n                    </Col>\n                </Row>\n                {\n                    selectData && <SelectRowData selectData={selectData} setSelectData={this.props.setSelectData}/>\n                }\n                <Row>\n                    <Col md={12}>\n                        <div className=\"w-100\">\n                            {\n                                this.props.getUserListStatus ? (\n                                    <div align=\"center\">\n                                        <Spinner className=\"m-2\" color=\"primary\" style={{ width: '6rem', height: '6rem'}} />\n                                    </div>\n                                ): this.props.usersList && (\n                                    <UsersTable\n                                        usersList={this.props.usersList}\n                                        getUserListStatus={this.props.getUserListStatus}\n                                        setSelectData={this.props.setSelectData}\n                                    />\n                                )\n                            }\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    usersList: state.Users.usersList,\n    getUserListStatus: state.Users.getUserListStatus,\n    selectData: state.Users.selectData,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getUsersList,\n    setSelectData\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","const ERROR_MESSAGE = 'Ошибка при получении данных!';\nconst SMALL_DATA_URL = '?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';\nconst BIG_DATA_URL = '?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';\n\nexport {ERROR_MESSAGE, SMALL_DATA_URL, BIG_DATA_URL};","import React from 'react';\nimport {Redirect,Route} from 'react-router-dom';\n\nimport Users from '../pages/users/Users';\n\nconst rootRoute = {\n    path: '/',\n    exact: true,\n    component: () => <Redirect to=\"/users\" />,\n    route: Route\n};\nconst usersRoute = {\n    path: '/users',\n    exact: true,\n    component: Users,\n    route: Route\n};\n\nconst allRoutes = [\n    rootRoute,\n    usersRoute\n];\n\nexport default allRoutes;","import React from 'react';\nimport {Router} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\n\nconst historyRef = createBrowserHistory();\n\nconst ExtBrowserRouter = ({children}) => (\n    <Router history={historyRef}>\n        {children}\n    </Router>\n);\n\nexport default ExtBrowserRouter;","import React from 'react';\nimport {BrowserRouter, Switch} from 'react-router-dom';\n\nimport allRoutes from './index';\nimport ExtBrowserRouter from \"./ExtBrowserRouter\";\n\nconst Routes = () => {\n    return (\n        <BrowserRouter>\n            <ExtBrowserRouter>\n                <Switch>\n                    {allRoutes.map((route, index) => (\n                        <route.route\n                            key={index}\n                            path={route.path}\n                            exact={route.exact}\n                            component={route.component}\n                        />\n                    ))}\n                </Switch>\n            </ExtBrowserRouter>\n        </BrowserRouter>\n    )\n};\n\nexport default Routes;","import React, {Component} from 'react';\nimport Routes from './routes/Routes';\n\nexport default class App extends Component {\n  render() {\n    return <Routes />\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*USERS*/\nimport {\n    SET_USERS_LIST,\n    SET_USERS_ERROR,\n    ADD_USER_STATUS,\n    NEW_USER_DATA,\n    SET_USER_LIST_STATUS,\n    SET_SELECT_DATA,\n} from './constants';\n\nconst initialState = {\n    usersList: '',\n    error: '',\n    selectData: '',\n    addUserStatus: false,\n    getUserListStatus: false,\n};\n\nconst UsersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USERS_LIST:\n            return {\n                ...state,\n                usersList: action.data,\n                getUserListStatus: !state.getUserListStatus\n            };\n        case SET_USERS_ERROR:\n            return {\n                ...state,\n                error: action.data\n            };\n        case ADD_USER_STATUS:\n            return {\n                ...state,\n                addUserStatus: !state.addUserStatus\n            };\n        case NEW_USER_DATA:\n            return {\n                ...state,\n                usersList: [{...action.data} ,...state.usersList],\n                addUserStatus: !state.addUserStatus\n            };\n        case SET_USER_LIST_STATUS:\n            return {\n                ...state,\n                getUserListStatus: !state.getUserListStatus,\n                selectData: ''\n            };\n        case SET_SELECT_DATA:\n            return {\n                ...state,\n                selectData: action.data\n            };\n        default:\n            return {...state}\n    }\n};\n\nexport default UsersReducer;\n","import {combineReducers} from 'redux';\n\nimport Users from './users/reducers';\n\nexport default combineReducers({\n    Users,\n});","const API_URL = 'http://www.filltext.com';\n\nconst fetchJSON = (url, options = {}) => {\n    return fetch(`${API_URL}/${url}`, options)\n        .then(response => {\n            if (!response.error === null) {\n                throw response.json();\n            }\n            return response.json();\n        })\n        .then(json => {\n            return json;\n        })\n        .catch(error => {\n            throw error;\n        });\n};\n\nconst apiOptions = (requestType, body) => {\n    if (body) {\n        return {\n            body: body,\n            method: requestType,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n    } else {\n        return {\n            method: requestType,\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n    }\n};\n\nexport {fetchJSON, apiOptions};","export const removeDuplicates = (array, key) => {\n    let lookup = new Set();\n    return array.filter(obj => !lookup.has(obj[key]) && lookup.add(obj[key]));\n};","/*USERS*/\nimport {all, call, fork, put, takeEvery} from 'redux-saga/effects';\nimport {fetchJSON, apiOptions} from \"../../helpers/api\";\n\nimport {GET_USERS_LIST} from './constants';\nimport {\n    setUsersList,\n    setUsersError,\n    setUserListStatus\n} from './actions';\nimport {removeDuplicates} from \"../../helpers/utils\";\nimport {ERROR_MESSAGE} from '../constants';\n\nfunction* fetchUsersList({payload: dataSize }) {\n    try {\n        yield put(setUserListStatus());\n        const response = yield call(\n            fetchJSON, dataSize,\n            apiOptions('GET')\n        );\n        if (response !== []) {\n            const userListNoDuplicate = removeDuplicates(response, 'id');\n            yield put(setUsersList(userListNoDuplicate));\n        } else {\n            yield put(setUsersError(ERROR_MESSAGE));\n            yield put(setUserListStatus())\n        }\n    } catch(error) {\n        let message;\n        switch (error.status) {\n            case 500:\n                message = 'Internal Server Error';\n                break;\n            case 401:\n                message = 'Invalid credentials';\n                break;\n            default:\n                message = ERROR_MESSAGE;\n        }\n        yield put(setUsersError(message))\n    }\n}\n\nfunction* watchFetchUserList() {\n    yield takeEvery(GET_USERS_LIST, fetchUsersList);\n}\n\nexport default function* usersSaga() {\n    yield all([\n        fork(watchFetchUserList)\n    ])\n}","import {all} from 'redux-saga/effects';\n\nimport usersSaga from './users/saga';\n\nexport default function* rootSaga() {\n    yield all([\n        usersSaga(),\n    ])\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const store = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n    sagaMiddleware.run(sagas);\n    return store;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {configureStore} from './redux/store';\n\nReactDOM.render(\n    <Provider store={configureStore({})}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}